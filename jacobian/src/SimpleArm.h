//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `SimpleArm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __SimpleArm_h__
#define __SimpleArm_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompSimpleArm
{

class SimpleArm;
class SimpleArmPrx;

}

namespace RoboCompSimpleArm
{

struct Pose6D
{
    float x;
    float y;
    float z;
    float rx;
    float ry;
    float rz;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, rx, ry, rz);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompSimpleArm
{

class SimpleArm : public virtual ::Ice::Object
{
public:

    using ProxyType = SimpleArmPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void closeFingers(float d, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_closeFingers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void home(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_home(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveTo(Pose6D pose, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_moveTo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openFingers(float d, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_openFingers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stop(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompSimpleArm
{

class SimpleArmPrx : public virtual ::Ice::Proxy<SimpleArmPrx, ::Ice::ObjectPrx>
{
public:

    void closeFingers(float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SimpleArmPrx::_iceI_closeFingers, d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto closeFingersAsync(float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SimpleArmPrx::_iceI_closeFingers, d, context);
    }

    ::std::function<void()>
    closeFingersAsync(float d,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompSimpleArm::SimpleArmPrx::_iceI_closeFingers, d, context);
    }

    /// \cond INTERNAL
    void _iceI_closeFingers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void home(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SimpleArmPrx::_iceI_home, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto homeAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SimpleArmPrx::_iceI_home, context);
    }

    ::std::function<void()>
    homeAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompSimpleArm::SimpleArmPrx::_iceI_home, context);
    }

    /// \cond INTERNAL
    void _iceI_home(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    void moveTo(const Pose6D& pose, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SimpleArmPrx::_iceI_moveTo, pose, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto moveToAsync(const Pose6D& pose, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SimpleArmPrx::_iceI_moveTo, pose, context);
    }

    ::std::function<void()>
    moveToAsync(const Pose6D& pose,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompSimpleArm::SimpleArmPrx::_iceI_moveTo, pose, context);
    }

    /// \cond INTERNAL
    void _iceI_moveTo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const Pose6D&, const ::Ice::Context&);
    /// \endcond

    void openFingers(float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SimpleArmPrx::_iceI_openFingers, d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto openFingersAsync(float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SimpleArmPrx::_iceI_openFingers, d, context);
    }

    ::std::function<void()>
    openFingersAsync(float d,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompSimpleArm::SimpleArmPrx::_iceI_openFingers, d, context);
    }

    /// \cond INTERNAL
    void _iceI_openFingers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);
    /// \endcond

    void stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &SimpleArmPrx::_iceI_stop, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &SimpleArmPrx::_iceI_stop, context);
    }

    ::std::function<void()>
    stopAsync(::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompSimpleArm::SimpleArmPrx::_iceI_stop, context);
    }

    /// \cond INTERNAL
    void _iceI_stop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    SimpleArmPrx() = default;
    friend ::std::shared_ptr<SimpleArmPrx> IceInternal::createProxy<SimpleArmPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompSimpleArm::Pose6D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompSimpleArm::Pose6D, S>
{
    static void read(S* istr, ::RoboCompSimpleArm::Pose6D& v)
    {
        istr->readAll(v.x, v.y, v.z, v.rx, v.ry, v.rz);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompSimpleArm
{

using SimpleArmPtr = ::std::shared_ptr<SimpleArm>;
using SimpleArmPrxPtr = ::std::shared_ptr<SimpleArmPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompSimpleArm
{

class SimpleArm;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< SimpleArm>&);
::IceProxy::Ice::Object* upCast(SimpleArm*);
/// \endcond

}

}

namespace RoboCompSimpleArm
{

class SimpleArm;
/// \cond INTERNAL
::Ice::Object* upCast(SimpleArm*);
/// \endcond
typedef ::IceInternal::Handle< SimpleArm> SimpleArmPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompSimpleArm::SimpleArm> SimpleArmPrx;
typedef SimpleArmPrx SimpleArmPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(SimpleArmPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompSimpleArm
{

struct Pose6D
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
};

}

namespace RoboCompSimpleArm
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_closeFingers.
 */
class Callback_SimpleArm_closeFingers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimpleArm_closeFingers_Base> Callback_SimpleArm_closeFingersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_home.
 */
class Callback_SimpleArm_home_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimpleArm_home_Base> Callback_SimpleArm_homePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_moveTo.
 */
class Callback_SimpleArm_moveTo_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimpleArm_moveTo_Base> Callback_SimpleArm_moveToPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_openFingers.
 */
class Callback_SimpleArm_openFingers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimpleArm_openFingers_Base> Callback_SimpleArm_openFingersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_stop.
 */
class Callback_SimpleArm_stop_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimpleArm_stop_Base> Callback_SimpleArm_stopPtr;

}

namespace IceProxy
{

namespace RoboCompSimpleArm
{

class SimpleArm : public virtual ::Ice::Proxy<SimpleArm, ::IceProxy::Ice::Object>
{
public:

    void closeFingers(::Ice::Float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_closeFingers(_iceI_begin_closeFingers(d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_closeFingers(::Ice::Float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_closeFingers(d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeFingers(::Ice::Float d, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeFingers(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeFingers(::Ice::Float d, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeFingers(d, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeFingers(::Ice::Float d, const ::RoboCompSimpleArm::Callback_SimpleArm_closeFingersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeFingers(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeFingers(::Ice::Float d, const ::Ice::Context& context, const ::RoboCompSimpleArm::Callback_SimpleArm_closeFingersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeFingers(d, context, cb, cookie);
    }

    void end_closeFingers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_closeFingers(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void home(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_home(_iceI_begin_home(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_home(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_home(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_home(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_home(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_home(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_home(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_home(const ::RoboCompSimpleArm::Callback_SimpleArm_homePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_home(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_home(const ::Ice::Context& context, const ::RoboCompSimpleArm::Callback_SimpleArm_homePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_home(context, cb, cookie);
    }

    void end_home(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_home(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_moveTo(_iceI_begin_moveTo(pose, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_moveTo(pose, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveTo(pose, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveTo(pose, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::RoboCompSimpleArm::Callback_SimpleArm_moveToPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveTo(pose, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_moveTo(const ::RoboCompSimpleArm::Pose6D& pose, const ::Ice::Context& context, const ::RoboCompSimpleArm::Callback_SimpleArm_moveToPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_moveTo(pose, context, cb, cookie);
    }

    void end_moveTo(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_moveTo(const ::RoboCompSimpleArm::Pose6D&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void openFingers(::Ice::Float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_openFingers(_iceI_begin_openFingers(d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_openFingers(::Ice::Float d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_openFingers(d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openFingers(::Ice::Float d, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openFingers(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openFingers(::Ice::Float d, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openFingers(d, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openFingers(::Ice::Float d, const ::RoboCompSimpleArm::Callback_SimpleArm_openFingersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openFingers(d, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openFingers(::Ice::Float d, const ::Ice::Context& context, const ::RoboCompSimpleArm::Callback_SimpleArm_openFingersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openFingers(d, context, cb, cookie);
    }

    void end_openFingers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_openFingers(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stop(_iceI_begin_stop(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stop(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::RoboCompSimpleArm::Callback_SimpleArm_stopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& context, const ::RoboCompSimpleArm::Callback_SimpleArm_stopPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stop(context, cb, cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stop(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompSimpleArm
{

class SimpleArm : public virtual ::Ice::Object
{
public:

    typedef SimpleArmPrx ProxyType;
    typedef SimpleArmPtr PointerType;

    virtual ~SimpleArm();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void closeFingers(::Ice::Float d, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_closeFingers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void home(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_home(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void moveTo(const Pose6D& pose, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_moveTo(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openFingers(::Ice::Float d, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_openFingers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void stop(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_stop(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const SimpleArm& lhs, const SimpleArm& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const SimpleArm& lhs, const SimpleArm& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompSimpleArm::Pose6D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompSimpleArm::Pose6D, S>
{
    static void write(S* ostr, const ::RoboCompSimpleArm::Pose6D& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
    }
};

template<typename S>
struct StreamReader< ::RoboCompSimpleArm::Pose6D, S>
{
    static void read(S* istr, ::RoboCompSimpleArm::Pose6D& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
    }
};

}
/// \endcond

namespace RoboCompSimpleArm
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_closeFingers.
 */
template<class T>
class CallbackNC_SimpleArm_closeFingers : public Callback_SimpleArm_closeFingers_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimpleArm_closeFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_closeFingers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_closeFingers<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_closeFingers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_closeFingers<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_closeFingers.
 */
template<class T, typename CT>
class Callback_SimpleArm_closeFingers : public Callback_SimpleArm_closeFingers_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimpleArm_closeFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T, typename CT> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_closeFingers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T, typename CT> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_closeFingers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T, typename CT> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_closeFingers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_closeFingers.
 */
template<class T, typename CT> Callback_SimpleArm_closeFingersPtr
newCallback_SimpleArm_closeFingers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_closeFingers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_home.
 */
template<class T>
class CallbackNC_SimpleArm_home : public Callback_SimpleArm_home_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimpleArm_home(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_home<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_home<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_home<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_home<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_home.
 */
template<class T, typename CT>
class Callback_SimpleArm_home : public Callback_SimpleArm_home_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimpleArm_home(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T, typename CT> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_home<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T, typename CT> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_home<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T, typename CT> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_home<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_home.
 */
template<class T, typename CT> Callback_SimpleArm_homePtr
newCallback_SimpleArm_home(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_home<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_moveTo.
 */
template<class T>
class CallbackNC_SimpleArm_moveTo : public Callback_SimpleArm_moveTo_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimpleArm_moveTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_moveTo<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_moveTo<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_moveTo<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_moveTo<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_moveTo.
 */
template<class T, typename CT>
class Callback_SimpleArm_moveTo : public Callback_SimpleArm_moveTo_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimpleArm_moveTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T, typename CT> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_moveTo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T, typename CT> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_moveTo<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T, typename CT> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_moveTo<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_moveTo.
 */
template<class T, typename CT> Callback_SimpleArm_moveToPtr
newCallback_SimpleArm_moveTo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_moveTo<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_openFingers.
 */
template<class T>
class CallbackNC_SimpleArm_openFingers : public Callback_SimpleArm_openFingers_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimpleArm_openFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_openFingers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_openFingers<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_openFingers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_openFingers<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_openFingers.
 */
template<class T, typename CT>
class Callback_SimpleArm_openFingers : public Callback_SimpleArm_openFingers_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimpleArm_openFingers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T, typename CT> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_openFingers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T, typename CT> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_openFingers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T, typename CT> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_openFingers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_openFingers.
 */
template<class T, typename CT> Callback_SimpleArm_openFingersPtr
newCallback_SimpleArm_openFingers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_openFingers<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_stop.
 */
template<class T>
class CallbackNC_SimpleArm_stop : public Callback_SimpleArm_stop_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimpleArm_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_stop<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_stop<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimpleArm_stop<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 * Create a wrapper instance by calling ::RoboCompSimpleArm::newCallback_SimpleArm_stop.
 */
template<class T, typename CT>
class Callback_SimpleArm_stop : public Callback_SimpleArm_stop_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimpleArm_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T, typename CT> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T, typename CT> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_stop<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T, typename CT> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_stop<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompSimpleArm::SimpleArm::begin_stop.
 */
template<class T, typename CT> Callback_SimpleArm_stopPtr
newCallback_SimpleArm_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimpleArm_stop<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
